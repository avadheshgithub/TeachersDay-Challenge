// Majority Element 
// Leetcode - 169


---------------------------------------------------
// Methode 01 - using sorting 

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        return (nums[n/2]);
    }
};

--------------------------------------------------
Methode 02 - using sorting

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        //  Approach -  O(nlogn)
        sort(nums.begin(),nums.end());
        int n = nums.size();
        int freq=1;
        int ans = nums[0];
        for(int i=1;i<n;i++){
            if(nums[i]==nums[i-1]) freq++;
            else{
                freq = 1;
                ans = nums[i];
            }
            if(freq>n/2) return ans;
        }
        return ans;
    }
};


------------------------------------------------
Methode 03 - Moore Majority Voting Algorithm.

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        // Moore Voting Algo --> O(n).
        int freq=0,ans=0;
        for(int i=0;i<nums.size();i++){
            if(freq==0) ans = nums[i];
            if(ans==nums[i]) freq++; // same ele --> fre increase
            else freq--; // if diff ele --> fre decrease;
        }
        return ans;
    }
};

----------------------------------------------------

Methode 04 - Brute Force Approach

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        for(int i=0;i<n;i++){
            int count =1;
            for(int j=i+1;j<n;j++){
                if(nums[i]==nums[j]) count++;
            }
            if(count>n/2) return nums[i];
        }
        return -1;
    }
};
